importFrom(partitions, setparts)
import(gmp)
#importFrom(pi0,combn2R)
##importExcept(Matrix, summary, update)
importFrom(QuasiSeq, nlsolve)
#importFrom(ks, vech) ## this requires rgl; reimplemented in 000utils.R
importFrom(varComp, p.value)
importFrom(moments, skewness, kurtosis, all.moments)
importFrom(PDQutils, moment2cumulant,cumulant2moment,dapx_gca,papx_gca)

export(
	mrpp,
	mrpp.test, mrppBVS, mrppBVS.test, 
	
	bw.smoothp,	bw.range, 
	
	grad.smoothp, get.p.dd.dw, 
	
	permuteTrt, nperms.permutedTrt, ntrt.permutedTrt, trt.permutedTrt,
	nparts, factorial.rising,
	
	FR2dec, dec2FR, dec2permvec, FR2permvec, permvec2dec, permvec2FR,
	
	HSEL.bigz, rejsample, sample1, sample.bigz,
	
	smrpp.test, smrpp.penWt, smrppInitSpar, 
	
	transform.matrix, transform.numeric, 
	
	pkernel, dkernel, pkde, dkde, fourier.kernel,
	
	p.value, 
	
	var, sd, skewness, kurtosis, moment, cumulant, 
	
	dpearson3, ppearson3, qpearson3, rpearson3, 
	dpearson3gca, ppearson3gca, dgammagca, pgammagca
)


S3method(mrpp.test, formula)
S3method(mrpp.test, dist)
S3method(mrpp.test, default)
S3method(mrpp.test, mrpp)

S3method(smrpp.test, default)
S3method(smrpp.test, formula)

S3method(transform, matrix)
S3method(transform, numeric)

S3method(print, mrppBVS)
S3method(p.value, mrpp.test)
S3method(p.value, grad.smoothp)

S3method(`[[`, dist)

S3method(mean, mrpp)
S3method(var, mrpp)
S3method(var, default)
S3method(sd, mrpp)
S3method(sd, default)
S3method(skewness, mrpp)
S3method(skewness, default)
S3method(kurtosis, mrpp)
S3method(kurtosis, default)
S3method(moment, mrpp)
S3method(moment, default)
S3method(cumulant, mrpp)
S3method(cumulant, default)

useDynLib(MRPP, .registration=TRUE)
# mrppstats, radixSort_prealloc, C_FR2permvec are registered
